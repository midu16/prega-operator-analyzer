name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  REGISTRY: quay.io
  IMAGE_NAME: quay.io/midu/prega-operator-analyzer
  PREGA_INDEX: quay.io/prega/test/prega/prega-operator-index:v4.20-20250908T090030

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run unit tests
      run: go test -v ./...

    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build binary
      run: |
        mkdir -p bin
        go build -o bin/prega-operator-analyzer ./cmd

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: prega-operator-analyzer-binary
        path: bin/prega-operator-analyzer

  podman-build:
    name: Build Podman Image (Single Arch)
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman and QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y podman qemu-user-static binfmt-support

    - name: Set up QEMU emulation
      run: |
        # Register QEMU handlers for cross-platform builds
        sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU setup
        podman run --rm --platform linux/arm64 alpine:latest echo "QEMU ARM64 emulation working"

    - name: Build Podman image
      run: |
        podman build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        podman build -t ${{ env.IMAGE_NAME }}:latest .

    - name: Test Podman image
      run: |
        mkdir -p test-output
        podman run --rm \
          -v $(pwd)/test-output:/app/output:Z \
          ${{ env.IMAGE_NAME }}:${{ github.sha }} || echo "Test completed (some failures may be expected)"

    - name: Save Podman image
      run: |
        podman save ${{ env.IMAGE_NAME }}:${{ github.sha }} -o image.tar

    - name: Upload Podman image artifact
      uses: actions/upload-artifact@v4
      with:
        name: podman-image-single
        path: image.tar

  podman-build-multi:
    name: Build Multi-Arch Podman Images
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman and QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y podman qemu-user-static binfmt-support

    - name: Set up QEMU emulation
      run: |
        # Register QEMU handlers for cross-platform builds
        sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU setup
        podman run --rm --platform linux/arm64 alpine:latest echo "QEMU ARM64 emulation working"

    - name: Build amd64 image
      run: |
        podman build --platform linux/amd64 -t ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 .
        podman build --platform linux/amd64 -t ${{ env.IMAGE_NAME }}:latest-amd64 .

    - name: Build arm64 image
      run: |
        podman build --platform linux/arm64 -t ${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64 .
        podman build --platform linux/arm64 -t ${{ env.IMAGE_NAME }}:latest-arm64 .

    - name: Test amd64 image
      run: |
        mkdir -p test-output-amd64
        podman run --rm \
          -v $(pwd)/test-output-amd64:/app/output:Z \
          ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 || echo "Test completed (some failures may be expected)"

    - name: Test arm64 image
      run: |
        mkdir -p test-output-arm64
        podman run --rm \
          -v $(pwd)/test-output-arm64:/app/output:Z \
          ${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64 || echo "Test completed (some failures may be expected)"

    - name: Save amd64 image
      run: |
        podman save ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 -o image-amd64.tar

    - name: Save arm64 image
      run: |
        podman save ${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64 -o image-arm64.tar

    - name: Upload amd64 image artifact
      uses: actions/upload-artifact@v4
      with:
        name: podman-image-amd64
        path: image-amd64.tar

    - name: Upload arm64 image artifact
      uses: actions/upload-artifact@v4
      with:
        name: podman-image-arm64
        path: image-arm64.tar

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, podman-build-multi]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman and QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y podman qemu-user-static binfmt-support

    - name: Set up QEMU emulation
      run: |
        # Register QEMU handlers for cross-platform builds
        sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU setup
        podman run --rm --platform linux/arm64 alpine:latest echo "QEMU ARM64 emulation working"

    - name: Download Podman image artifacts
      uses: actions/download-artifact@v4
      with:
        name: podman-image-amd64

    - name: Load amd64 image
      run: podman load -i image-amd64.tar

    - name: Run integration test (amd64)
      run: |
        mkdir -p integration-output-amd64
        podman run --rm \
          -v $(pwd)/integration-output-amd64:/app/output:Z \
          ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64 \
          --prega-index=${{ env.PREGA_INDEX }} \
          --output=/app/output/integration-test-release-notes-amd64.txt \
          --verbose || echo "Integration test completed (some failures may be expected)"

    - name: Check amd64 output file
      run: |
        if [ -f "integration-output-amd64/integration-test-release-notes-amd64.txt" ]; then
          echo "AMD64 integration test output file created successfully"
          echo "File size: $(wc -l < integration-output-amd64/integration-test-release-notes-amd64.txt) lines"
        else
          echo "AMD64 integration test output file not found"
          exit 1
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: podman-build-multi
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman and QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y podman qemu-user-static binfmt-support

    - name: Set up QEMU emulation
      run: |
        # Register QEMU handlers for cross-platform builds
        sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU setup
        podman run --rm --platform linux/arm64 alpine:latest echo "QEMU ARM64 emulation working"

    - name: Download Podman image artifacts
      uses: actions/download-artifact@v4
      with:
        name: podman-image-amd64

    - name: Load amd64 image
      run: podman load -i image-amd64.tar

    - name: Run Trivy vulnerability scanner (amd64)
      uses: aquasecurity/trivy-action@v0.25.0
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64
        format: 'sarif'
        output: 'trivy-results-amd64.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results-amd64.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, podman-build-multi, integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Podman and QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y podman qemu-user-static binfmt-support

    - name: Set up QEMU emulation
      run: |
        # Register QEMU handlers for cross-platform builds
        sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify QEMU setup
        podman run --rm --platform linux/arm64 alpine:latest echo "QEMU ARM64 emulation working"

    - name: Download binary artifact
      uses: actions/download-artifact@v4
      with:
        name: prega-operator-analyzer-binary

    - name: Download Podman image artifacts
      uses: actions/download-artifact@v4
      with:
        name: podman-image-amd64

    - name: Download Podman image artifacts
      uses: actions/download-artifact@v4
      with:
        name: podman-image-arm64

    - name: Load images
      run: |
        podman load -i image-amd64.tar
        podman load -i image-arm64.tar

    - name: Login to Quay.io
      run: |
        echo "${{ secrets.QUAY_PASSWORD }}" | podman login quay.io -u "${{ secrets.QUAY_USERNAME }}" --password-stdin

    - name: Push multi-arch images
      run: |
        podman push ${{ env.IMAGE_NAME }}:${{ github.sha }}-amd64
        podman push ${{ env.IMAGE_NAME }}:${{ github.sha }}-arm64
        podman push ${{ env.IMAGE_NAME }}:latest-amd64
        podman push ${{ env.IMAGE_NAME }}:latest-arm64

    - name: Generate changelog
      run: |
        echo "## Release Notes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Version: ${{ github.sha }}" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- Built from commit: ${{ github.sha }}" >> CHANGELOG.md
        echo "- Prega Index: ${{ env.PREGA_INDEX }}" >> CHANGELOG.md
        echo "- Build Date: $(date -u)" >> CHANGELOG.md
        echo "- Architectures: amd64, arm64" >> CHANGELOG.md

    - name: Create Release
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

    - name: Upload Binary to Release
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./bin/prega-operator-analyzer
        asset_name: prega-operator-analyzer-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload AMD64 Image Archive to Release
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./image-amd64.tar
        asset_name: prega-operator-analyzer-image-amd64.tar
        asset_content_type: application/octet-stream

    - name: Upload ARM64 Image Archive to Release
      uses: actions/upload-release-asset@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./image-arm64.tar
        asset_name: prega-operator-analyzer-image-arm64.tar
        asset_content_type: application/octet-stream
