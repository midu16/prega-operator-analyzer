package pkg

import (
	"strings"
	"testing"
	"time"
)

func TestReleaseNoteFormatter(t *testing.T) {
	formatter := NewReleaseNoteFormatter()

	if formatter.MaxContributors != 5 {
		t.Errorf("Expected MaxContributors to be 5, got %d", formatter.MaxContributors)
	}

	if formatter.MaxCommits != 50 {
		t.Errorf("Expected MaxCommits to be 50, got %d", formatter.MaxCommits)
	}
}

func TestFormatReleaseNote(t *testing.T) {
	formatter := NewReleaseNoteFormatter()

	now := time.Now()
	oneWeekAgo := now.AddDate(0, 0, -7)

	format := ReleaseNoteFormat{
		Header: "Release Notes Generated on: 2024-01-15 14:30:25",
		RepositoryInfo: RepositoryInfo{
			URL:         "https://github.com/test/repo",
			Name:        "test-repo",
			Description: "Test repository",
		},
		AnalysisPeriod: "Last 7 days (since 2024-01-08 14:30:25)",
		AnalysisStart:  oneWeekAgo,
		AnalysisEnd:    now,
		LatestCommit: CommitInfo{
			Hash:    "a1b2c3d4",
			Message: "Test commit message",
			Author:  "Test Author",
			Date:    now,
		},
		WeeklySummary: WeeklySummary{
			TotalCommits:      10,
			TotalLinesChanged: 500,
			ActiveContributors: 3,
			AnalysisStart:     oneWeekAgo,
			AnalysisEnd:       now,
		},
		Contributors: []Contributor{
			{Name: "Author 1", CommitCount: 5, Rank: 1},
			{Name: "Author 2", CommitCount: 3, Rank: 2},
			{Name: "Author 3", CommitCount: 2, Rank: 3},
		},
		Commits: []CommitDetail{
			{Hash: "a1b2c3d4", Message: "Test commit 1", Author: "Author 1", Date: now},
			{Hash: "b2c3d4e5", Message: "Test commit 2", Author: "Author 2", Date: now.Add(-time.Hour)},
		},
		Footer: "Generated by Prega Operator Analyzer",
	}

	result := formatter.FormatReleaseNote(format)

	// Check that all expected sections are present
	expectedSections := []string{
		"Release Notes Generated on: 2024-01-15 14:30:25",
		"Repository: https://github.com/test/repo",
		"Name: test-repo",
		"Description: Test repository",
		"Analysis Period: Last 7 days (since 2024-01-08 14:30:25)",
		"=== LATEST COMMIT INFORMATION ===",
		"Hash: a1b2c3d4",
		"Message: Test commit message",
		"Author: Test Author",
		"=== WEEKLY ACTIVITY SUMMARY ===",
		"Total Commits: 10",
		"Total Lines Changed: 500",
		"Active Contributors: 3",
		"=== TOP CONTRIBUTORS (LAST WEEK) ===",
		"1. Author 1 (5 commits)",
		"2. Author 2 (3 commits)",
		"3. Author 3 (2 commits)",
		"=== COMMITS FROM LAST WEEK ===",
		"- Test commit 1 (a1b2c3d4) by Author 1",
		"- Test commit 2 (b2c3d4e5) by Author 2",
		"Generated by Prega Operator Analyzer",
	}

	for _, section := range expectedSections {
		if !strings.Contains(result, section) {
			t.Errorf("Expected section '%s' not found in formatted output", section)
		}
	}
}

func TestFormatReleaseNoteWithNoCommits(t *testing.T) {
	formatter := NewReleaseNoteFormatter()

	now := time.Now()
	oneWeekAgo := now.AddDate(0, 0, -7)

	format := ReleaseNoteFormat{
		Header: "Release Notes Generated on: 2024-01-15 14:30:25",
		RepositoryInfo: RepositoryInfo{
			URL: "https://github.com/test/repo",
		},
		AnalysisPeriod: "Last 7 days (since 2024-01-08 14:30:25)",
		AnalysisStart:  oneWeekAgo,
		AnalysisEnd:    now,
		LatestCommit: CommitInfo{
			Hash:    "a1b2c3d4",
			Message: "Test commit message",
			Author:  "Test Author",
			Date:    now,
		},
		WeeklySummary: WeeklySummary{
			TotalCommits:      0,
			TotalLinesChanged: 0,
			ActiveContributors: 0,
			AnalysisStart:     oneWeekAgo,
			AnalysisEnd:       now,
		},
		Contributors: []Contributor{},
		Commits:      []CommitDetail{},
		Footer:       "Generated by Prega Operator Analyzer",
	}

	result := formatter.FormatReleaseNote(format)

	// Check that no commits section is present
	if !strings.Contains(result, "=== NO COMMITS IN LAST WEEK ===") {
		t.Errorf("Expected 'NO COMMITS IN LAST WEEK' section not found")
	}

	if strings.Contains(result, "=== COMMITS FROM LAST WEEK ===") {
		t.Errorf("Unexpected 'COMMITS FROM LAST WEEK' section found when there are no commits")
	}
}

func TestCreateStandardFormat(t *testing.T) {
	formatter := NewReleaseNoteFormatter()

	now := time.Now()
	oneWeekAgo := now.AddDate(0, 0, -7)

	latestCommit := CommitInfo{
		Hash:    "a1b2c3d4",
		Message: "Test commit",
		Author:  "Test Author",
		Date:    now,
	}

	weeklySummary := WeeklySummary{
		TotalCommits:      5,
		TotalLinesChanged: 250,
		ActiveContributors: 2,
		AnalysisStart:     oneWeekAgo,
		AnalysisEnd:       now,
	}

	contributors := []Contributor{
		{Name: "Author 1", CommitCount: 3, Rank: 1},
		{Name: "Author 2", CommitCount: 2, Rank: 2},
	}

	commits := []CommitDetail{
		{Hash: "a1b2c3d4", Message: "Test commit 1", Author: "Author 1", Date: now},
		{Hash: "b2c3d4e5", Message: "Test commit 2", Author: "Author 2", Date: now.Add(-time.Hour)},
	}

	format := formatter.CreateStandardFormat(
		"https://github.com/test/repo",
		oneWeekAgo,
		now,
		latestCommit,
		weeklySummary,
		contributors,
		commits,
	)

	// Test that the format is created correctly
	if format.RepositoryInfo.URL != "https://github.com/test/repo" {
		t.Errorf("Expected URL 'https://github.com/test/repo', got %s", format.RepositoryInfo.URL)
	}

	if format.AnalysisStart != oneWeekAgo {
		t.Errorf("Expected AnalysisStart %v, got %v", oneWeekAgo, format.AnalysisStart)
	}

	if format.AnalysisEnd != now {
		t.Errorf("Expected AnalysisEnd %v, got %v", now, format.AnalysisEnd)
	}

	if format.LatestCommit.Hash != "a1b2c3d4" {
		t.Errorf("Expected LatestCommit.Hash 'a1b2c3d4', got %s", format.LatestCommit.Hash)
	}

	if format.WeeklySummary.TotalCommits != 5 {
		t.Errorf("Expected TotalCommits 5, got %d", format.WeeklySummary.TotalCommits)
	}

	if len(format.Contributors) != 2 {
		t.Errorf("Expected 2 contributors, got %d", len(format.Contributors))
	}

	if len(format.Commits) != 2 {
		t.Errorf("Expected 2 commits, got %d", len(format.Commits))
	}
}

func TestCreateStandardFormatWithLimits(t *testing.T) {
	formatter := NewReleaseNoteFormatter()

	now := time.Now()
	oneWeekAgo := now.AddDate(0, 0, -7)

	latestCommit := CommitInfo{
		Hash:    "a1b2c3d4",
		Message: "Test commit",
		Author:  "Test Author",
		Date:    now,
	}

	weeklySummary := WeeklySummary{
		TotalCommits:      10,
		TotalLinesChanged: 500,
		ActiveContributors: 7,
		AnalysisStart:     oneWeekAgo,
		AnalysisEnd:       now,
	}

	// Create more contributors than the limit
	contributors := make([]Contributor, 10)
	for i := 0; i < 10; i++ {
		contributors[i] = Contributor{
			Name:        "Author " + string(rune('1'+i)),
			CommitCount: 10 - i,
			Rank:        i + 1,
		}
	}

	// Create more commits than the limit
	commits := make([]CommitDetail, 100)
	for i := 0; i < 100; i++ {
		commits[i] = CommitDetail{
			Hash:    "hash" + string(rune('1'+i)),
			Message: "Test commit " + string(rune('1'+i)),
			Author:  "Author " + string(rune('1'+(i%3))),
			Date:    now.Add(-time.Duration(i) * time.Hour),
		}
	}

	format := formatter.CreateStandardFormat(
		"https://github.com/test/repo",
		oneWeekAgo,
		now,
		latestCommit,
		weeklySummary,
		contributors,
		commits,
	)

	// Test that limits are applied
	if len(format.Contributors) != formatter.MaxContributors {
		t.Errorf("Expected %d contributors (limited), got %d", formatter.MaxContributors, len(format.Contributors))
	}

	if len(format.Commits) != formatter.MaxCommits {
		t.Errorf("Expected %d commits (limited), got %d", formatter.MaxCommits, len(format.Commits))
	}
}

func TestFormatErrorSection(t *testing.T) {
	formatter := NewReleaseNoteFormatter()

	err := WrapError(nil, ErrorTypeNetwork, "connection failed", map[string]interface{}{
		"url": "https://github.com/test/repo",
	})

	result := formatter.FormatErrorSection("https://github.com/test/repo", err)

	expectedSections := []string{
		"Repository: https://github.com/test/repo",
		"=== ERROR PROCESSING REPOSITORY ===",
		"Error: [NETWORK_ERROR] connection failed",
		"This repository could not be processed successfully.",
		"Please check the repository URL and network connectivity.",
	}

	for _, section := range expectedSections {
		if !strings.Contains(result, section) {
			t.Errorf("Expected section '%s' not found in error format", section)
		}
	}
}
